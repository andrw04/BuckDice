@inject GameManager gameManager
@implements IDisposable

@if(!gameManager.GameCompleted)
{
    <div class="container">
        <div class="row">
            <div class="col-sm-8">
                <h2>Point: @gameManager.Point</h2>
                <br />
                <h2>Dice</h2>
                @foreach (var roll in gameManager.DiceRolls)
                {
                    <ul class="dice dice_@roll">
                        @for (int i = 0; i < roll; i++)
                        {
                            <li class="dice__point"></li>
                        }
                    </ul>
                }
            </div>
            <div class="col-sm-4">
                <h2>@gameManager.Players.Peek().Username 's turn.</h2>
                @if (gameManager.Players.Peek().Username == gameManager.Username)
                {
                    <button @onclick="gameManager.RollTheDice" class="btn btn-primary">Roll the dice</button>
                }
                <br/>
                <h2>Scores:</h2>
                <ol>
                    @foreach (var player in gameManager.Players)
                    {
                        <li>@player.Username | @player.Points</li>
                    }
                </ol>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <h1>@gameManager.Players.Peek().Username is looser!!!</h1>
    </div>
}

@code 
{
    protected async override Task OnInitializedAsync()
    {
        gameManager.GameStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        gameManager.GameStateChanged += StateHasChanged;
    }
}
