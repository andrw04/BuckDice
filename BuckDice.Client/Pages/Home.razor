@* @inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>BuckDice game</PageTitle>
<h1>BuckDice</h1>

<h2>@Message</h2>

<ul id="groupList">
    @foreach (var group in Groups)
    {
        <li>
            <p>@group</p>
            <button @onclick="@(() => EnterGroup(group))">Connect</button>
        </li>
    }
</ul>
<input type="text" @bind="Username" />

<button @onclick="GetGroupList" disabled="@(!IsConnected)">GetGroupList</button>


@code {
    private HubConnection? hubConnection;
    private string Message { get; set; } = "asd";

    private List<string> Groups { get; set; } = new();

    private string Username { get; set; } = "user";


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7078/buckdice")
        .Build();

        hubConnection.On<List<string>>("RecieveGroupList", (groups) =>
        {
            Groups = groups;

            // обновляем состояние окна
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("Notify", (message) =>
        {
            Message = message;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    private async Task EnterGroup(string groupName)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Enter", groupName, Username);
        }
    }


    private async Task GetGroupList()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendGroupList");
        }
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
} *@